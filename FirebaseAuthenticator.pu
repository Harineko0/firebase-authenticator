@startuml Pibrary
namespace Pibrary {
    class Constant {
        {static} + string ROOT_PATH
    }

    class Pibrary {
        {static} + void Initialize()
    }
}

namespace Pibrary.Config {
    enum Environment
    {
        Development
        Production
    }

    enum LoadingState {
        WaitingToLoad
        Loading
        Completed
    }

    interface IConfigLoader {
        + IObservable<LoadingState> OnStateChanged
        + PibraryConfig Config
    }

    class AddressableConfigLoader implements IConfigLoader {
        - Environment environment
    }

    class ConfigProvider {
        {static} - IConfigLoader configLoader
        {static} + OAuthConfig OAuthConfig
        {static} + void Initialize()
    }

    class PibraryConfig {
        + OAuthConfig OAuthConfig
    }

    class OAuthConfig {
        + string cliendID
        + string cliendSecret
    }

    PibraryConfig --o IConfigLoader
    ConfigProvider ..> IConfigLoader
    PibraryConfig o-- OAuthConfig
    LoadingState <-- IConfigLoader
    Environment <-- AddressableConfigLoader
}

namespace Pibrary.Auth {

}

namespace Pibrary.User {

}

namespace Pibrary.Data {

}

Pibrary.Config.ConfigProvider <.. Pibrary.Pibrary
@enduml